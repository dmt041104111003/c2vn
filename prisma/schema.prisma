generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LoginMethod {
  google
  wallet
  email
}

enum PostStatus {
  draft
  published
  scheduled
}

enum AdvertisementType {
  banner
  slide
  popup
}

model Advertisement {
  id            String            @id @default(uuid())
  title         String
  description   String?
  image_url     String
  redirect_url  String?
  type          AdvertisementType
  is_active     Boolean           @default(true)
  display_order Int               @default(0)
  start_date    DateTime?
  end_date      DateTime?
  created_at    DateTime          @default(now())
}

model Role {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  is_default  Boolean @default(false)

  users       User[]            @relation("UserRoles")
  permissions RolePermission[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile?

  roles     Role[]     @relation("UserRoles")
  posts     Post[]     @relation("UserPosts")
  comments  Comment[]  @relation("UserComments")
  likes     Like[]     @relation("UserLikes")

  @@map("users")
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String?
  dob       String?
  phone     String?
  hometown  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  created_at  DateTime @default(now())

  posts Post[]
}

model Tag {
  id         String   @id @default(uuid())
  name       String
  slug       String   @unique
  created_at DateTime @default(now())

  posts PostTag[]
}

model Permission {
  id          String           @id @default(uuid())
  action      String           @unique
  description String?
  roles       RolePermission[]
}

model Post {
  id            String     @id @default(uuid())
  title         String
  slug          String     @unique
  content       String
  summary       String?
  thumbnail_url String?
  video_url     String?
  status        PostStatus @default(draft)
  view_count    Int        @default(0)
  author_id     String?
  author        User?      @relation("UserPosts", fields: [author_id], references: [id])
  category_id   String?
  category      Category?  @relation(fields: [category_id], references: [id])
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())
  published_at  DateTime?
  scheduled_at  DateTime?

  tags     PostTag[]
  comments Comment[]
  likes    Like[]
}

model PostTag {
  post_id String
  tag_id  String

  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@id([post_id, tag_id])
}

model Comment {
  id                String  @id @default(uuid())
  post_id           String
  user_id           String?
  content           String
  parent_comment_id String?

  post    Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user    User?     @relation("UserComments", fields: [user_id], references: [id])
  parent  Comment?  @relation("CommentToReplies", fields: [parent_comment_id], references: [id])
  replies Comment[] @relation("CommentToReplies")

  is_approved Boolean  @default(false)
  created_at  DateTime @default(now())
}

model Like {
  user_id String
  post_id String

  user User @relation("UserLikes", fields: [user_id], references: [id], onDelete: Cascade)
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())

  @@id([user_id, post_id])
}

model RolePermission {
  role_id       String
  permission_id String

  role       Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@id([role_id, permission_id])
}
